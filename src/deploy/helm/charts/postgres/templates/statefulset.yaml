{{- if $.Values.global.postgres.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  serviceName: {{ include "postgres.fullname" . }}
  selector:
    matchLabels:
      {{- include "postgres.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "postgres.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "postgres.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default "15" }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.fullname" . }}-credentials
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.fullname" . }}-credentials
                  key: password
            {{- if eq "true" (include "postgres.haveDatabases" .) }}
            - name: POSTGRES_MULTIPLE_DATABASES
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.fullname" . }}-credentials
                  key: databases
            {{- end }}
          volumeMounts:
            - name: {{ include "postgres.fullname" . }}-data
              mountPath: /var/lib/postgresql
            - name: init-scripts
              mountPath: /docker-entrypoint-initdb.d
            - name: shm
              mountPath: /dev/shm
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        {{- if not .Values.storage.pvc.enabled }}
        - name: {{ include "postgres.fullname" . }}-data
          emptyDir:
            medium: ""
            sizeLimit: {{ .Values.storage.size | default "1Gi" }}
        {{- end }}
        - name: shm
          emptyDir:
            sizeLimit: 128Mi
            medium: Memory
        - name: init-scripts
          configMap:
            name: {{ include "postgres.fullname" . }}-scripts
  updateStrategy:
    type: RollingUpdate
  {{- if .Values.storage.pvc.enabled -}}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: {{ include "postgres.fullname" . }}-data
      spec:
        {{- if .Values.storage.pvc.storageClass -}}
        storageClassName: {{ .Values.storage.pvc.storageClass }}
        {{- end -}}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.storage.size | default "1Gi" }}
        volumeMode: Filesystem
  {{- end -}}
{{- end -}}
